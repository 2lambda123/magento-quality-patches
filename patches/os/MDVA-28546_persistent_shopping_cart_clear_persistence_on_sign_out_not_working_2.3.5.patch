diff --git a/vendor/magento/module-persistent/Observer/SynchronizePersistentOnLoginObserver.php b/vendor/magento/module-persistent/Observer/SynchronizePersistentOnLoginObserver.php
index 52a2912c4b1..f0b05cb7850 100644
--- a/vendor/magento/module-persistent/Observer/SynchronizePersistentOnLoginObserver.php
+++ b/vendor/magento/module-persistent/Observer/SynchronizePersistentOnLoginObserver.php
@@ -11,6 +11,9 @@ use Magento\Framework\Event\ObserverInterface;
 
 /**
  * Persistent Session Observer
+ *
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
+ * @SuppressWarnings(PHPMD.CookieAndSessionMisuse)
  */
 class SynchronizePersistentOnLoginObserver implements ObserverInterface
 {
@@ -63,6 +66,8 @@ class SynchronizePersistentOnLoginObserver implements ObserverInterface
     }
 
     /**
+     * Synchronize persistent session data with logged in customer
+     *
      * @param Observer $observer
      * @return void
      * @SuppressWarnings(PHPMD.CyclomaticComplexity)
@@ -96,8 +101,9 @@ class SynchronizePersistentOnLoginObserver implements ObserverInterface
             if (!$sessionModel->getId()) {
                 /** @var \Magento\Persistent\Model\Session $sessionModel */
                 $sessionModel = $this->_sessionFactory->create();
-                $sessionModel->setCustomerId($customer->getId())->save();
+                $sessionModel->setCustomerId($customer->getId());
             }
+            $sessionModel->save();
             $this->_persistentSession->setSession($sessionModel);
         }
 
diff --git a/dev/tests/integration/testsuite/Magento/Persistent/Observer/SynchronizePersistentOnLoginObserverTest.php b/dev/tests/integration/testsuite/Magento/Persistent/Observer/SynchronizePersistentOnLoginObserverTest.php
index 1405a772007..89e25fa9665 100644
--- a/dev/tests/integration/testsuite/Magento/Persistent/Observer/SynchronizePersistentOnLoginObserverTest.php
+++ b/dev/tests/integration/testsuite/Magento/Persistent/Observer/SynchronizePersistentOnLoginObserverTest.php
@@ -5,18 +5,31 @@
  */
 namespace Magento\Persistent\Observer;
 
+use DateTime;
+use DateTimeZone;
+use Magento\Customer\Api\CustomerRepositoryInterface;
+use Magento\Customer\Api\Data\CustomerInterface;
+use Magento\Framework\Event;
+use Magento\Framework\Event\Observer;
+use Magento\Framework\ObjectManagerInterface;
+use Magento\Persistent\Model\Session;
+use Magento\Persistent\Model\SessionFactory;
+use Magento\TestFramework\Helper\Bootstrap;
+use PHPUnit\Framework\TestCase;
+
 /**
  * @magentoDataFixture Magento/Customer/_files/customer.php
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
  */
-class SynchronizePersistentOnLoginObserverTest extends \PHPUnit\Framework\TestCase
+class SynchronizePersistentOnLoginObserverTest extends TestCase
 {
     /**
-     * @var \Magento\Persistent\Observer\SynchronizePersistentOnLoginObserver
+     * @var SynchronizePersistentOnLoginObserver
      */
     protected $_model;
 
     /**
-     * @var \Magento\Framework\ObjectManagerInterface
+     * @var ObjectManagerInterface
      */
     protected $_objectManager;
 
@@ -29,46 +42,70 @@ class SynchronizePersistentOnLoginObserverTest extends \PHPUnit\Framework\TestCa
      * @var \Magento\Customer\Model\Session
      */
     protected $_customerSession;
+    /**
+     * @var CustomerInterface
+     */
+    private $customer;
 
+    /**
+     * @inheritDoc
+     */
     public function setUp()
     {
-        $this->_objectManager = \Magento\TestFramework\Helper\Bootstrap::getObjectManager();
+        $this->_objectManager = Bootstrap::getObjectManager();
         $this->_persistentSession = $this->_objectManager->get(\Magento\Persistent\Helper\Session::class);
         $this->_customerSession = $this->_objectManager->get(\Magento\Customer\Model\Session::class);
         $this->_model = $this->_objectManager->create(
-            \Magento\Persistent\Observer\SynchronizePersistentOnLoginObserver::class,
+            SynchronizePersistentOnLoginObserver::class,
             [
                 'persistentSession' => $this->_persistentSession,
                 'customerSession' => $this->_customerSession
             ]
         );
+        /** @var CustomerRepositoryInterface $customerRepository */
+        $customerRepository = $this->_objectManager->create(CustomerRepositoryInterface::class);
+        $this->customer = $customerRepository->getById(1);
     }
 
     /**
-     * @covers \Magento\Persistent\Observer\SynchronizePersistentOnLoginObserver::execute
+     * Test that persistent session is created on customer login
      */
-    public function testSynchronizePersistentOnLogin()
+    public function testSynchronizePersistentOnLogin(): void
     {
-        $event = new \Magento\Framework\Event();
-        $observer = new \Magento\Framework\Event\Observer(['event' => $event]);
-
-        /** @var \Magento\Customer\Api\CustomerRepositoryInterface $customerRepository */
-        $customerRepository = $this->_objectManager->create(
-            \Magento\Customer\Api\CustomerRepositoryInterface::class
-        );
-
-        /** @var $customer \Magento\Customer\Api\Data\CustomerInterface */
-        $customer = $customerRepository->getById(1);
-        $event->setData('customer', $customer);
+        $sessionModel = $this->_objectManager->create(Session::class);
+        $sessionModel->loadByCustomerId($this->customer->getId());
+        $this->assertNull($sessionModel->getCustomerId());
+        $event = new Event();
+        $observer = new Observer(['event' => $event]);
+        $event->setData('customer', $this->customer);
         $this->_persistentSession->setRememberMeChecked(true);
         $this->_model->execute($observer);
-
         // check that persistent session has been stored for Customer
-        /** @var \Magento\Persistent\Model\Session $sessionModel */
-        $sessionModel = \Magento\TestFramework\Helper\Bootstrap::getObjectManager()->create(
-            \Magento\Persistent\Model\Session::class
-        );
+        /** @var Session $sessionModel */
+        $sessionModel = $this->_objectManager->create(Session::class);
+        $sessionModel->loadByCustomerId($this->customer->getId());
+        $this->assertEquals($this->customer->getId(), $sessionModel->getCustomerId());
+    }
+
+    /**
+     * Test that expired persistent session is renewed on customer login
+     */
+    public function testExpiredPersistentSessionShouldBeRenewedOnLogin(): void
+    {
+        $lastUpdatedAt = (new DateTime('-1day'))->setTimezone(new DateTimeZone('UTC'))->format('Y-m-d H:i:s');
+        /** @var Session $sessionModel */
+        $sessionModel = $this->_objectManager->create(SessionFactory::class)->create();
+        $sessionModel->setCustomerId($this->customer->getId());
+        $sessionModel->setUpdatedAt($lastUpdatedAt);
+        $sessionModel->save();
+        $event = new Event();
+        $observer = new Observer(['event' => $event]);
+        $event->setData('customer', $this->customer);
+        $this->_persistentSession->setRememberMeChecked(true);
+        $this->_model->execute($observer);
+        /** @var Session $sessionModel */
+        $sessionModel = $this->_objectManager->create(Session::class);
         $sessionModel->loadByCustomerId(1);
-        $this->assertEquals(1, $sessionModel->getCustomerId());
+        $this->assertGreaterThan($lastUpdatedAt, $sessionModel->getUpdatedAt());
     }
 }
