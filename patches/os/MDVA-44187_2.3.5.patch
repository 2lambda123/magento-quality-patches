diff --git a/vendor/magento/module-catalog/Model/Product/Gallery/CreateHandler.php b/vendor/magento/module-catalog/Model/Product/Gallery/CreateHandler.php
index 225a3a4c44a..8bcd0e25214 100644
--- a/vendor/magento/module-catalog/Model/Product/Gallery/CreateHandler.php
+++ b/vendor/magento/module-catalog/Model/Product/Gallery/CreateHandler.php
@@ -8,10 +8,12 @@ declare(strict_types=1);
 namespace Magento\Catalog\Model\Product\Gallery;
 
 use Magento\Catalog\Api\Data\ProductInterface;
+use Magento\Catalog\Model\Product;
 use Magento\Framework\App\Filesystem\DirectoryList;
 use Magento\Framework\App\ObjectManager;
 use Magento\Framework\EntityManager\Operation\ExtensionInterface;
 use Magento\MediaStorage\Model\File\Uploader as FileUploader;
+use Magento\Store\Model\Store;
 use Magento\Store\Model\StoreManagerInterface;
 
 /**
@@ -89,6 +91,15 @@ class CreateHandler implements ExtensionInterface
      */
     private $storeManager;
 
+    /**
+     * @var string[]
+     */
+    private $mediaAttributesWithLabels = [
+        'image',
+        'small_image',
+        'thumbnail'
+    ];
+
     /**
      * @param \Magento\Framework\EntityManager\MetadataPool $metadataPool
      * @param \Magento\Catalog\Api\ProductAttributeRepositoryInterface $attributeRepository
@@ -190,27 +201,8 @@ class CreateHandler implements ExtensionInterface
             $value['duplicate'] = $duplicate;
         }
 
-        /* @var $mediaAttribute \Magento\Catalog\Api\Data\ProductAttributeInterface */
-        foreach ($this->getMediaAttributeCodes() as $mediaAttrCode) {
-            $attrData = $product->getData($mediaAttrCode);
-            if (empty($attrData) && empty($clearImages) && empty($newImages) && empty($existImages)) {
-                continue;
-            }
-            $this->processMediaAttribute(
-                $product,
-                $mediaAttrCode,
-                $clearImages,
-                $newImages
-            );
-            if (in_array($mediaAttrCode, ['image', 'small_image', 'thumbnail'])) {
-                $this->processMediaAttributeLabel(
-                    $product,
-                    $mediaAttrCode,
-                    $clearImages,
-                    $newImages,
-                    $existImages
-                );
-            }
+        if (!empty($value['images'])) {
+            $this->processMediaAttributes($product, $existImages, $newImages, $clearImages);
         }
 
         $product->setData($attrCode, $value);
@@ -492,30 +484,39 @@ class CreateHandler implements ExtensionInterface
     /**
      * Process media attribute
      *
-     * @param \Magento\Catalog\Model\Product $product
+     * @param Product $product
      * @param string $mediaAttrCode
      * @param array $clearImages
      * @param array $newImages
      */
     private function processMediaAttribute(
-        \Magento\Catalog\Model\Product $product,
-        $mediaAttrCode,
+        Product $product,
+        string $mediaAttrCode,
         array $clearImages,
         array $newImages
-    ) {
-        $attrData = $product->getData($mediaAttrCode);
-        if (in_array($attrData, $clearImages)) {
-            $product->setData($mediaAttrCode, 'no_selection');
-        }
-
-        if (in_array($attrData, array_keys($newImages))) {
-            $product->setData($mediaAttrCode, $newImages[$attrData]['new_file']);
-        }
-        if (!empty($product->getData($mediaAttrCode))) {
+    ): void {
+        $storeId = $product->isObjectNew() ? Store::DEFAULT_STORE_ID : (int) $product->getStoreId();
+        /***
+         * Attributes values are saved as default value in single store mode
+         * @see \Magento\Catalog\Model\ResourceModel\AbstractResource::_saveAttributeValue
+         */
+        if ($storeId === Store::DEFAULT_STORE_ID
+            || $this->storeManager->hasSingleStore()
+            || $this->getMediaAttributeStoreValue($product, $mediaAttrCode, $storeId) !== null
+        ) {
+            $value = $product->getData($mediaAttrCode);
+            $newValue = $value;
+            if (in_array($value, $clearImages)) {
+                $newValue = 'no_selection';
+            }
+            if (in_array($value, array_keys($newImages))) {
+                $newValue = $newImages[$value]['new_file'];
+            }
+            $product->setData($mediaAttrCode, $newValue);
             $product->addAttributeUpdate(
                 $mediaAttrCode,
-                $product->getData($mediaAttrCode),
-                $product->getStoreId()
+                $newValue,
+                $storeId
             );
         }
     }
@@ -523,19 +524,19 @@ class CreateHandler implements ExtensionInterface
     /**
      * Process media attribute label
      *
-     * @param \Magento\Catalog\Model\Product $product
+     * @param Product $product
      * @param string $mediaAttrCode
      * @param array $clearImages
      * @param array $newImages
      * @param array $existImages
      */
     private function processMediaAttributeLabel(
-        \Magento\Catalog\Model\Product $product,
-        $mediaAttrCode,
+        Product $product,
+        string $mediaAttrCode,
         array $clearImages,
         array $newImages,
         array $existImages
-    ) {
+    ): void {
         $resetLabel = false;
         $attrData = $product->getData($mediaAttrCode);
         if (in_array($attrData, $clearImages)) {
@@ -607,4 +608,57 @@ class CreateHandler implements ExtensionInterface
 
         return $canRemoveImage;
     }
+
+    /**
+     * Get media attribute value for store view
+     *
+     * @param Product $product
+     * @param string $attributeCode
+     * @param int|null $storeId
+     * @return string|null
+     */
+    private function getMediaAttributeStoreValue(Product $product, string $attributeCode, int $storeId = null): ?string
+    {
+        $gallery = $this->getImagesForAllStores($product);
+        $storeId = $storeId === null ? (int) $product->getStoreId() : $storeId;
+        foreach ($gallery as $image) {
+            if ($image['attribute_code'] === $attributeCode && ((int)$image['store_id']) === $storeId) {
+                return $image['filepath'];
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Update media attributes
+     *
+     * @param Product $product
+     * @param array $existImages
+     * @param array $newImages
+     * @param array $clearImages
+     */
+    private function processMediaAttributes(
+        Product $product,
+        array $existImages,
+        array $newImages,
+        array $clearImages
+    ): void {
+        foreach ($this->getMediaAttributeCodes() as $mediaAttrCode) {
+            $this->processMediaAttribute(
+                $product,
+                $mediaAttrCode,
+                $clearImages,
+                $newImages
+            );
+            if (in_array($mediaAttrCode, $this->mediaAttributesWithLabels)) {
+                $this->processMediaAttributeLabel(
+                    $product,
+                    $mediaAttrCode,
+                    $clearImages,
+                    $newImages,
+                    $existImages
+                );
+            }
+        }
+    }
 }
diff --git a/vendor/magento/module-catalog/Model/ProductRepository.php b/vendor/magento/module-catalog/Model/ProductRepository.php
index 59a92656abf..f625987b810 100644
--- a/vendor/magento/module-catalog/Model/ProductRepository.php
+++ b/vendor/magento/module-catalog/Model/ProductRepository.php
@@ -28,6 +28,8 @@ use Magento\Framework\Exception\NoSuchEntityException;
 use Magento\Framework\Exception\StateException;
 use Magento\Framework\Exception\TemporaryState\CouldNotSaveException as TemporaryCouldNotSaveException;
 use Magento\Framework\Exception\ValidatorException;
+use Magento\Store\Model\Store;
+use Magento\Catalog\Api\Data\EavAttributeInterface;
 
 /**
  * Product Repository.
@@ -513,9 +515,12 @@ class ProductRepository implements \Magento\Catalog\Api\ProductRepositoryInterfa
     {
         $assignToCategories = false;
         $tierPrices = $product->getData('tier_price');
+        $productDataToChange = $product->getData();
 
         try {
-            $existingProduct = $product->getId() ? $this->getById($product->getId()) : $this->get($product->getSku());
+            $existingProduct = $product->getId() ?
+                $this->getById($product->getId()) :
+                $this->get($product->getSku());
 
             $product->setData(
                 $this->resourceModel->getLinkField(),
@@ -545,7 +550,6 @@ class ProductRepository implements \Magento\Catalog\Api\ProductRepositoryInterfa
         }
         $productDataArray['store_id'] = (int)$this->storeManager->getStore()->getId();
         $product = $this->initializeProductData($productDataArray, empty($existingProduct));
-
         $this->processLinks($product, $productLinks);
         if (isset($productDataArray['media_gallery'])) {
             $this->processMediaGallery($product, $productDataArray['media_gallery']['images']);
@@ -566,6 +570,41 @@ class ProductRepository implements \Magento\Catalog\Api\ProductRepositoryInterfa
             $product->setData('tier_price', $tierPrices);
         }
 
+        try {
+            $stores = $product->getStoreIds();
+            $websites = $product->getWebsiteIds();
+        } catch (NoSuchEntityException $exception) {
+            $stores = null;
+            $websites = null;
+        }
+
+        if (!empty($existingProduct) && is_array($stores) && is_array($websites)) {
+            $hasDataChanged = false;
+            $productAttributes = $product->getAttributes();
+            if ($productAttributes !== null
+                && $product->getStoreId() !== Store::DEFAULT_STORE_ID
+                && (count($stores) > 1 || count($websites) === 1)
+            ) {
+                foreach ($productAttributes as $attribute) {
+                    $attributeCode = $attribute->getAttributeCode();
+                    $value = $product->getData($attributeCode);
+                    if ($existingProduct->getData($attributeCode) === $value
+                        && $attribute->getScope() !== EavAttributeInterface::SCOPE_GLOBAL_TEXT
+                        && !is_array($value)
+                        && !$attribute->isStatic()
+                        && !array_key_exists($attributeCode, $productDataToChange)
+                        && $value !== null
+                    ) {
+                        $product->setData($attributeCode);
+                        $hasDataChanged = true;
+                    }
+                }
+                if ($hasDataChanged) {
+                    $product->setData('_edit_mode', true);
+                }
+            }
+        }
+
         $this->saveProduct($product);
         if ($assignToCategories === true && $product->getCategoryIds()) {
             $this->linkManagement->assignProductToCategories(
diff --git a/vendor/magento/module-catalog/Model/ResourceModel/Product/Gallery.php b/vendor/magento/module-catalog/Model/ResourceModel/Product/Gallery.php
index a9741cd8e1e..a654608c1c2 100644
--- a/vendor/magento/module-catalog/Model/ResourceModel/Product/Gallery.php
+++ b/vendor/magento/module-catalog/Model/ResourceModel/Product/Gallery.php
@@ -6,6 +6,8 @@
 
 namespace Magento\Catalog\Model\ResourceModel\Product;
 
+use Magento\Catalog\Model\Product\Media\Config;
+use Magento\Framework\App\ObjectManager;
 use Magento\Store\Model\Store;
 
 /**
@@ -31,22 +33,30 @@ class Gallery extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
      * @since 101.0.0
      */
     protected $metadata;
+    /**
+     * @var Config|null
+     */
+    private $mediaConfig;
 
     /**
      * @param \Magento\Framework\Model\ResourceModel\Db\Context $context
      * @param \Magento\Framework\EntityManager\MetadataPool $metadataPool
      * @param string $connectionName
+     * @param Config|null $mediaConfig
+     * @throws \Exception
      */
     public function __construct(
         \Magento\Framework\Model\ResourceModel\Db\Context $context,
         \Magento\Framework\EntityManager\MetadataPool $metadataPool,
-        $connectionName = null
+        $connectionName = null,
+        ?Config $mediaConfig = null
     ) {
         $this->metadata = $metadataPool->getMetadata(
             \Magento\Catalog\Api\Data\ProductInterface::class
         );
 
         parent::__construct($context, $connectionName);
+        $this->mediaConfig = $mediaConfig ?? ObjectManager::getInstance()->get(Config::class);
     }
 
     /**
@@ -490,7 +500,7 @@ class Gallery extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
             $storeIds
         )->where(
             'attribute_code IN (?)',
-            ['small_image', 'thumbnail', 'image']
+            $this->mediaConfig->getMediaAttributeCodes()
         );
 
         return $this->getConnection()->fetchAll($select);
