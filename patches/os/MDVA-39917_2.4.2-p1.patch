diff --git a/vendor/magento/module-catalog/Ui/DataProvider/Product/Form/Modifier/CustomOptions.php b/vendor/magento/module-catalog/Ui/DataProvider/Product/Form/Modifier/CustomOptions.php
index 2e1ea59573c..c60e4fae06c 100644
--- a/vendor/magento/module-catalog/Ui/DataProvider/Product/Form/Modifier/CustomOptions.php
+++ b/vendor/magento/module-catalog/Ui/DataProvider/Product/Form/Modifier/CustomOptions.php
@@ -38,61 +38,61 @@ class CustomOptions extends AbstractModifier
     /**#@+
      * Group values
      */
-    const GROUP_CUSTOM_OPTIONS_NAME = 'custom_options';
-    const GROUP_CUSTOM_OPTIONS_SCOPE = 'data.product';
-    const GROUP_CUSTOM_OPTIONS_PREVIOUS_NAME = 'search-engine-optimization';
-    const GROUP_CUSTOM_OPTIONS_DEFAULT_SORT_ORDER = 31;
+    public const GROUP_CUSTOM_OPTIONS_NAME = 'custom_options';
+    public const GROUP_CUSTOM_OPTIONS_SCOPE = 'data.product';
+    public const GROUP_CUSTOM_OPTIONS_PREVIOUS_NAME = 'search-engine-optimization';
+    public const GROUP_CUSTOM_OPTIONS_DEFAULT_SORT_ORDER = 31;
     /**#@-*/
 
     /**#@+
      * Button values
      */
-    const BUTTON_ADD = 'button_add';
-    const BUTTON_IMPORT = 'button_import';
+    public const BUTTON_ADD = 'button_add';
+    public const BUTTON_IMPORT = 'button_import';
     /**#@-*/
 
     /**#@+
      * Container values
      */
-    const CONTAINER_HEADER_NAME = 'container_header';
-    const CONTAINER_OPTION = 'container_option';
-    const CONTAINER_COMMON_NAME = 'container_common';
-    const CONTAINER_TYPE_STATIC_NAME = 'container_type_static';
+    public const CONTAINER_HEADER_NAME = 'container_header';
+    public const CONTAINER_OPTION = 'container_option';
+    public const CONTAINER_COMMON_NAME = 'container_common';
+    public const CONTAINER_TYPE_STATIC_NAME = 'container_type_static';
     /**#@-*/
 
     /**#@+
      * Grid values
      */
-    const GRID_OPTIONS_NAME = 'options';
-    const GRID_TYPE_SELECT_NAME = 'values';
+    public const GRID_OPTIONS_NAME = 'options';
+    public const GRID_TYPE_SELECT_NAME = 'values';
     /**#@-*/
 
     /**#@+
      * Field values
      */
-    const FIELD_ENABLE = 'affect_product_custom_options';
-    const FIELD_OPTION_ID = 'option_id';
-    const FIELD_TITLE_NAME = 'title';
-    const FIELD_STORE_TITLE_NAME = 'store_title';
-    const FIELD_TYPE_NAME = 'type';
-    const FIELD_IS_REQUIRE_NAME = 'is_require';
-    const FIELD_SORT_ORDER_NAME = 'sort_order';
-    const FIELD_PRICE_NAME = 'price';
-    const FIELD_PRICE_TYPE_NAME = 'price_type';
-    const FIELD_SKU_NAME = 'sku';
-    const FIELD_MAX_CHARACTERS_NAME = 'max_characters';
-    const FIELD_FILE_EXTENSION_NAME = 'file_extension';
-    const FIELD_IMAGE_SIZE_X_NAME = 'image_size_x';
-    const FIELD_IMAGE_SIZE_Y_NAME = 'image_size_y';
-    const FIELD_IS_DELETE = 'is_delete';
-    const FIELD_IS_USE_DEFAULT = 'is_use_default';
+    public const FIELD_ENABLE = 'affect_product_custom_options';
+    public const FIELD_OPTION_ID = 'option_id';
+    public const FIELD_TITLE_NAME = 'title';
+    public const FIELD_STORE_TITLE_NAME = 'store_title';
+    public const FIELD_TYPE_NAME = 'type';
+    public const FIELD_IS_REQUIRE_NAME = 'is_require';
+    public const FIELD_SORT_ORDER_NAME = 'sort_order';
+    public const FIELD_PRICE_NAME = 'price';
+    public const FIELD_PRICE_TYPE_NAME = 'price_type';
+    public const FIELD_SKU_NAME = 'sku';
+    public const FIELD_MAX_CHARACTERS_NAME = 'max_characters';
+    public const FIELD_FILE_EXTENSION_NAME = 'file_extension';
+    public const FIELD_IMAGE_SIZE_X_NAME = 'image_size_x';
+    public const FIELD_IMAGE_SIZE_Y_NAME = 'image_size_y';
+    public const FIELD_IS_DELETE = 'is_delete';
+    public const FIELD_IS_USE_DEFAULT = 'is_use_default';
     /**#@-*/
 
     /**#@+
      * Import options values
      */
-    const IMPORT_OPTIONS_MODAL = 'import_options_modal';
-    const CUSTOM_OPTIONS_LISTING = 'product_custom_options_listing';
+    public const IMPORT_OPTIONS_MODAL = 'import_options_modal';
+    public const CUSTOM_OPTIONS_LISTING = 'product_custom_options_listing';
     /**#@-*/
 
     /**
@@ -661,12 +661,16 @@ class CustomOptions extends AbstractModifier
                     'config' => [
                         'addButtonLabel' => __('Add Value'),
                         'componentType' => DynamicRows::NAME,
-                        'component' => 'Magento_Ui/js/dynamic-rows/dynamic-rows',
+                        'component' => 'Magento_Catalog/js/components/dynamic-rows-per-page',
+                        'template' => 'Magento_Catalog/components/dynamic-rows-per-page',
                         'additionalClasses' => 'admin__field-wide',
                         'deleteProperty' => static::FIELD_IS_DELETE,
                         'deleteValue' => '1',
                         'renderDefaultRecord' => false,
                         'sortOrder' => $sortOrder,
+                        'sizesConfig' => [
+                            'enabled' => true
+                        ]
                     ],
                 ],
             ],
diff --git a/vendor/magento/module-catalog/view/adminhtml/web/js/components/dynamic-rows-per-page.js b/vendor/magento/module-catalog/view/adminhtml/web/js/components/dynamic-rows-per-page.js
new file mode 100644
index 00000000000..a532a01c5c4
--- /dev/null
+++ b/vendor/magento/module-catalog/view/adminhtml/web/js/components/dynamic-rows-per-page.js
@@ -0,0 +1,110 @@
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+define([
+    'Magento_Ui/js/dynamic-rows/dynamic-rows',
+    'underscore',
+    'mageUtils',
+    'uiLayout',
+    'rjsResolver'
+], function (DynamicRows, _, utils, layout, resolver) {
+    'use strict';
+
+    return DynamicRows.extend({
+        defaults: {
+            sizesConfig: {
+                component: 'Magento_Ui/js/grid/paging/sizes',
+                name: '${ $.name }_sizes',
+                options: {
+                    '20': {
+                        value: 20,
+                        label: 20
+                    },
+                    '30': {
+                        value: 30,
+                        label: 30
+                    },
+                    '50': {
+                        value: 50,
+                        label: 50
+                    },
+                    '100': {
+                        value: 100,
+                        label: 100
+                    },
+                    '200': {
+                        value: 200,
+                        label: 200
+                    }
+                },
+                storageConfig: {
+                    provider: '${ $.storageConfig.provider }',
+                    namespace: '${ $.storageConfig.namespace }'
+                },
+                enabled: false
+            },
+            links: {
+                options: '${ $.sizesConfig.name }:options',
+                pageSize: '${ $.sizesConfig.name }:value'
+            },
+            listens: {
+                'pageSize': 'onPageSizeChange'
+            },
+            modules: {
+                sizes: '${ $.sizesConfig.name }'
+            }
+        },
+
+        /**
+         * Initializes paging component.
+         *
+         * @returns {Paging} Chainable.
+         */
+        initialize: function () {
+            this._super()
+                .initSizes();
+
+            return this;
+        },
+
+        /**
+         * Initializes sizes component.
+         *
+         * @returns {Paging} Chainable.
+         */
+        initSizes: function () {
+            if (this.sizesConfig.enabled) {
+                layout([this.sizesConfig]);
+            }
+
+            return this;
+        },
+
+        /**
+         * Initializes observable properties.
+         *
+         * @returns {Paging} Chainable.
+         */
+        initObservable: function () {
+            this._super()
+                .track([
+                    'pageSize'
+                ]);
+
+            return this;
+        },
+
+        /**
+         * Handles changes of the page size.
+         */
+        onPageSizeChange: function () {
+            resolver(function () {
+                if (this.elems().length) {
+                    this.reload();
+                }
+            }, this);
+        }
+    });
+});
diff --git a/vendor/magento/module-catalog/view/adminhtml/web/template/components/dynamic-rows-per-page.html b/vendor/magento/module-catalog/view/adminhtml/web/template/components/dynamic-rows-per-page.html
new file mode 100644
index 00000000000..1abd131c21d
--- /dev/null
+++ b/vendor/magento/module-catalog/view/adminhtml/web/template/components/dynamic-rows-per-page.html
@@ -0,0 +1,80 @@
+<!--
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+-->
+<div class="admin__field" visible="visible" disable="disabled" css="element.setClasses(element)">
+    <label if="element.label" class="admin__field-label" attr="for: element.uid">
+        <span translate="element.label"></span>
+    </label>
+
+    <div class="admin__field-control" data-role="grid-wrapper" attr="'data-index': index">
+        <div class="admin__control-table-wrapper" style="overflow-x: visible;" >
+            <div data-role="spinner"
+                 class="admin__data-grid-loading-mask"
+                 if="$data.showSpinner">
+                <div class="spinner">
+                    <span repeat="8"></span>
+                </div>
+            </div>
+
+            <table class="admin__dynamic-rows admin__control-table" data-role="grid" attr="{'data-index': index}">
+                <thead if="element.columnsHeader">
+                <tr>
+                    <th if="dndConfig.enabled"></th>
+                    <th repeat="foreach: labels, item: '$label'"
+                        css="setClasses($label())"
+                        visible="$label().visible"
+                        disable="$label().disabled">
+                        <span translate="$label().label"></span>
+                    </th>
+                </tr>
+                </thead>
+
+                <tbody afterRender="onPageSizeChange">
+                <tr class="data-row" repeat="foreach: elems, item: '$record'">
+                    <td if="dndConfig.enabled"
+                        class="col-draggable"
+                        template="name: dndConfig.template, data: dnd"></td>
+
+                    <!-- ko foreach: { data: $record().elems(), as: 'elem'}  -->
+                    <td if="elem.template"
+                        css="$parent.setClasses(elem)"
+                        visible="elem.visible() && elem.formElement !== 'hidden'"
+                        disable="elem.disabled"
+                        template="elem.template"></td>
+                    <!-- /ko -->
+                </tr>
+                </tbody>
+
+                <tfoot visible="element.addButton || (!!element.getRecordCount() && pages() > 1)">
+                <tr>
+                    <td attr="{'colspan': element.getColumnsCount()}"
+                        visible="element.addButton || pages() > 1">
+                        <button if="element.addButton"
+                                attr="{disabled: disabled, 'data-action': 'add_new_row'}"
+                                type="button"
+                                click="processingAddChild.bind($data, false, false, false)">
+                            <span translate="addButtonLabel"></span>
+                        </button>
+
+                        <div class="admin__data-grid-pager-wrap">
+                            <scope args="sizes" render=""></scope>
+
+                            <div class="admin__control-table-pagination" visible="!!element.getRecordCount() && pages() > 1">
+                                <div class="admin__data-grid-pager">
+                                    <button class="action-previous" type="button" data-bind="attr: {title: $t('Previous Page')}, click: previousPage, disable: isFirst()"></button>
+                                    <input class="admin__control-text" type="number" data-bind="attr: {id: ++ko.uid}, value: currentPage">
+                                    <label class="admin__control-support-text" data-bind="attr: {for: ko.uid}, text: 'of ' + pages()"></label>
+                                    <button class="action-next" type="button" data-bind="attr: {title: $t('Next Page')}, click: nextPage, disable: isLast()"></button>
+                                </div>
+                            </div>
+                        </div>
+                    </td>
+                </tr>
+                </tfoot>
+            </table>
+        </div>
+    </div>
+</div>
diff --git a/vendor/magento/theme-adminhtml-backend/Magento_Ui/web/css/source/module/_data-grid.less b/vendor/magento/theme-adminhtml-backend/Magento_Ui/web/css/source/module/_data-grid.less
index 3e9f2d4401b..9e341a1df64 100644
--- a/vendor/magento/theme-adminhtml-backend/Magento_Ui/web/css/source/module/_data-grid.less
+++ b/vendor/magento/theme-adminhtml-backend/Magento_Ui/web/css/source/module/_data-grid.less
@@ -423,6 +423,7 @@ body._in-resize {
     .data-grid-actions-cell {
         padding-left: @data-grid-cell__padding-horizontal * 2;
         padding-right: @data-grid-cell__padding-horizontal * 2;
+        position: relative;
         text-align: center;
         width: 1%;
     }
diff --git a/vendor/magento/theme-adminhtml-backend/web/css/source/forms/fields/_control-table.less b/vendor/magento/theme-adminhtml-backend/web/css/source/forms/fields/_control-table.less
index 0a81223525f..4ef29a23267 100644
--- a/vendor/magento/theme-adminhtml-backend/web/css/source/forms/fields/_control-table.less
+++ b/vendor/magento/theme-adminhtml-backend/web/css/source/forms/fields/_control-table.less
@@ -24,7 +24,6 @@
 .admin__control-table-wrapper {
     max-width: 100%;
     overflow-x: auto;
-    overflow-y: hidden;
 }
 
 .admin__control-table {
