diff --git a/vendor/magento/module-inventory-sales/Observer/SalesInventory/DeductSourceItemQuantityOnRefundObserver.php b/vendor/magento/module-inventory-sales/Plugin/Sales/OrderManagement/DeductSourceItemQuantityOnRefundPlugin.php
similarity index 66%
rename from vendor/magento/module-inventory-sales/Observer/SalesInventory/DeductSourceItemQuantityOnRefundObserver.php
rename to vendor/magento/module-inventory-sales/Plugin/Sales/OrderManagement/DeductSourceItemQuantityOnRefundPlugin.php
index f080682019b7..54e5d95dae54 100644
--- a/vendor/magento/module-inventory-sales/Observer/SalesInventory/DeductSourceItemQuantityOnRefundObserver.php
+++ b/vendor/magento/module-inventory-sales/Plugin/Sales/OrderManagement/DeductSourceItemQuantityOnRefundPlugin.php
@@ -5,20 +5,21 @@
  */
 declare(strict_types=1);
 
-namespace Magento\InventorySales\Observer\SalesInventory;
+namespace Magento\InventorySales\Plugin\Sales\OrderManagement;
 
-use Magento\Framework\Event\Observer;
-use Magento\Framework\Event\ObserverInterface;
 use Magento\InventoryCatalogApi\Model\GetProductTypesBySkusInterface;
 use Magento\InventoryConfigurationApi\Model\IsSourceItemManagementAllowedForProductTypeInterface;
 use Magento\InventorySales\Model\ReturnProcessor\DeductSourceItemQuantityOnRefund;
 use Magento\InventorySalesApi\Model\GetSkuFromOrderItemInterface;
 use Magento\InventorySalesApi\Model\ReturnProcessor\Request\ItemsToRefundInterfaceFactory;
+use Magento\Sales\Api\CreditmemoRepositoryInterface;
+use Magento\Sales\Api\Data\CreditmemoInterface;
 use Magento\Sales\Api\Data\CreditmemoItemInterface as CreditmemoItem;
 use Magento\Sales\Api\Data\OrderItemInterface;
 use Magento\Sales\Api\OrderRepositoryInterface;
+use Magento\Catalog\Model\ResourceModel\Product as ProductResourceModel;
 
-class DeductSourceItemQuantityOnRefundObserver implements ObserverInterface
+class DeductSourceItemQuantityOnRefundPlugin
 {
     /**
      * @var GetSkuFromOrderItemInterface
@@ -50,6 +51,11 @@ class DeductSourceItemQuantityOnRefundObserver implements ObserverInterface
      */
     private $orderRepository;
 
+    /**
+     * @var ProductResourceModel
+     */
+    private $productResource;
+
     /**
      * @param GetSkuFromOrderItemInterface $getSkuFromOrderItem
      * @param ItemsToRefundInterfaceFactory $itemsToRefundFactory
@@ -57,6 +63,7 @@ class DeductSourceItemQuantityOnRefundObserver implements ObserverInterface
      * @param GetProductTypesBySkusInterface $getProductTypesBySkus
      * @param DeductSourceItemQuantityOnRefund $deductSourceItemQuantityOnRefund
      * @param OrderRepositoryInterface $orderRepository
+     * @param ProductResourceModel $productResource
      */
     public function __construct(
         GetSkuFromOrderItemInterface $getSkuFromOrderItem,
@@ -64,7 +71,8 @@ public function __construct(
         IsSourceItemManagementAllowedForProductTypeInterface $isSourceItemManagementAllowedForProductType,
         GetProductTypesBySkusInterface $getProductTypesBySkus,
         DeductSourceItemQuantityOnRefund $deductSourceItemQuantityOnRefund,
-        OrderRepositoryInterface $orderRepository
+        OrderRepositoryInterface $orderRepository,
+        ProductResourceModel $productResource
     ) {
         $this->getSkuFromOrderItem = $getSkuFromOrderItem;
         $this->itemsToRefundFactory = $itemsToRefundFactory;
@@ -72,23 +80,53 @@ public function __construct(
         $this->getProductTypesBySkus = $getProductTypesBySkus;
         $this->deductSourceItemQuantityOnRefund = $deductSourceItemQuantityOnRefund;
         $this->orderRepository = $orderRepository;
+        $this->productResource = $productResource;
     }
 
     /**
-     * @param Observer $observer
+     * On Credit Memo create, issues the reservation compensation record.
+     *
+     * Before saving the credit memo, validates if the credit memo object was created or updated.
+     * If the credit memo was updates, we should not compensate the reservation.
+     *
+     * @param CreditmemoRepositoryInterface $subject
+     * @param callable $proceed
+     * @param CreditmemoInterface $entity
+     * @return mixed
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function aroundSave(
+        CreditmemoRepositoryInterface $subject,
+        callable $proceed,
+        CreditmemoInterface $entity
+    ) {
+        $isNewCreditMemo = !(bool)$entity->getEntityId();
+        $result = $proceed($entity);
+
+        if ($isNewCreditMemo) {
+            $this->compensateReservation($entity);
+        }
+
+        return $result;
+    }
+
+    /**
+     * Compensate reservation for creditmemo item
+     *
+     * @param CreditmemoInterface $creditMemo
      * @return void
      */
-    public function execute(Observer $observer)
+    private function compensateReservation(CreditmemoInterface $creditMemo): void
     {
-        /* @var $creditmemo \Magento\Sales\Model\Order\Creditmemo */
-        $creditmemo = $observer->getEvent()->getCreditmemo();
-        $order = $this->orderRepository->get($creditmemo->getOrderId());
+        $order = $this->orderRepository->get($creditMemo->getOrderId());
         $itemsToRefund = $refundedOrderItemIds = [];
+        $productSkus = [];
         /** @var CreditmemoItem $item */
-        foreach ($creditmemo->getItems() as $item) {
+        foreach ($creditMemo->getItems() as $item) {
             /** @var OrderItemInterface $orderItem */
             $orderItem = $item->getOrderItem();
             $sku = $this->getSkuFromOrderItem->execute($orderItem);
+            $productSkus[] = $sku;
 
             if ($this->isValidItem($sku, $item)) {
                 $refundedOrderItemIds[] = $item->getOrderItemId();
@@ -101,13 +139,17 @@ public function execute(Observer $observer)
             }
         }
 
+        $existingProductIdsBySkus = $this->productResource->getProductsIdsBySkus($productSkus);
+
         $itemsToDeductFromSource = [];
         foreach ($itemsToRefund as $sku => $data) {
-            $itemsToDeductFromSource[] = $this->itemsToRefundFactory->create([
-                'sku' => $sku,
-                'qty' => $data['qty'],
-                'processedQty' => $data['processedQty']
-            ]);
+            if (array_key_exists($sku, $existingProductIdsBySkus)) {
+                $itemsToDeductFromSource[] = $this->itemsToRefundFactory->create([
+                    'sku' => $sku,
+                    'qty' => $data['qty'],
+                    'processedQty' => $data['processedQty']
+                ]);
+            }
         }
 
         if (!empty($itemsToDeductFromSource)) {
@@ -120,6 +162,8 @@ public function execute(Observer $observer)
     }
 
     /**
+     * Validate if the compensation should be processed
+     *
      * @param string $sku
      * @param CreditmemoItem $item
      * @return bool
@@ -139,6 +183,7 @@ private function isValidItem(string $sku, CreditmemoItem $item): bool
 
         return $this->isSourceItemManagementAllowedForProductType->execute($productType)
                 && $item->getQty() > 0
-                && !$item->getBackToStock();
+                && !$item->getBackToStock()
+                && !$orderItem->getIsVirtual();
     }
 }
diff --git a/vendor/magento/module-inventory-sales/etc/di.xml b/vendor/magento/module-inventory-sales/etc/di.xml
index b94a1e61023e..19faa0c3719d 100644
--- a/vendor/magento/module-inventory-sales/etc/di.xml
+++ b/vendor/magento/module-inventory-sales/etc/di.xml
@@ -169,6 +169,9 @@
         <plugin name="delete_website_to_stock_link" type="Magento\InventorySales\Plugin\Store\Model\ResourceModel\Website\DeleteWebsiteToStockLinkPlugin"/>
         <plugin name="update_sales_channel_website_code" type="Magento\InventorySales\Plugin\Store\Model\ResourceModel\Website\UpdateSalesChannelWebsiteCodePlugin"/>
     </type>
+    <type name="Magento\Sales\Api\CreditmemoRepositoryInterface">
+        <plugin name="deduct_source_item_quantity_on_refund" type="Magento\InventorySales\Plugin\Sales\OrderManagement\DeductSourceItemQuantityOnRefundPlugin"/>
+    </type>
     <type name="Magento\InventoryApi\Model\StockValidatorChain">
         <arguments>
             <argument name="validators" xsi:type="array">
diff --git a/vendor/magento/module-inventory-sales/etc/events.xml b/vendor/magento/module-inventory-sales/etc/events.xml
index 63cfbdac4429..568e90310f81 100644
--- a/vendor/magento/module-inventory-sales/etc/events.xml
+++ b/vendor/magento/module-inventory-sales/etc/events.xml
@@ -12,10 +12,6 @@
     <event name="sales_order_item_cancel">
         <observer name="inventory" instance="Magento\InventorySales\Observer\CatalogInventory\CancelOrderItemObserver"/>
     </event>
-    <event name="sales_order_creditmemo_save_after">
-        <observer name="deduct_source_item_quantity_on_refund" instance="Magento\InventorySales\Observer\SalesInventory\DeductSourceItemQuantityOnRefundObserver"/>
-    </event>
-
     <!--There is no need to register product sale and reindex stock items, as in multi source inventory only reservations are created after order placement.-->
     <event name="checkout_submit_all_after">
         <observer name="inventory" instance="Magento\CatalogInventory\Observer\CheckoutAllSubmitAfterObserver" disabled="true"/>
